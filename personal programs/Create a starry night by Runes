// My contest entry
import {overlay_frac, scale_independent, color, blue, white, green, pink, purple,
blank, yellow, rotate, beside, sail, pentagram, overlay, translate, circle, indigo,
stack_frac, square, quarter_turn_right, beside_frac, flip_horiz, show
} from 'rune';
function runes_contest_YU_HANG() {
    //This function can create an unique picture of starry night each time.

    // return a random number betweeen 1 and 2000, 
    // to create different stars or blanks in the following functions.
    function random(){ 
        const random_helper = (2000 * math_random());
        const random = (random_helper - random_helper % 1);
        return random;
    }
    
    // create a Uranus (there might be more than 1 Uranus in the pic )
    function Uranus(){
        return overlay_frac(0.2, scale_independent(0.05, 0.9, blue(circle)), 
                           (scale_independent(0.4, 0.4, indigo(circle))));
    }
    
    // create a Saturn (there might be more than 1 Saturn in the pic)
    function Saturn(){
        return overlay_frac(0.2, quarter_turn_right(
                     scale_independent(0.05, 1, color(circle, 0.58, 0.5, 0.3))), 
                    (scale_independent(0.4, 0.4, yellow(circle))));
    }
    
    // create a moon
    function moon(){
        return translate(-0.75, -0.75, 
               scale_independent(0.12, 0.12, overlay_frac(0, 
                            yellow(circle), 
                            translate(0.4, 0.2, 
                            color(circle, 0.17647, 0.18823, 0.4039)))));// RGB (0,255ï¼‰converted 
    }
    
    // create shooting stars with pentagram and sail
    function create_shooting_star(){
        return beside_frac(0.1, stack_frac(0.96, 
                beside(sail, flip_horiz(sail)), scale_independent(1.2, 1.2, pentagram)), blank);
    }
    
    function shooting_star_position(a, b, x, y){
        return translate(x, y, rotate(-0.7, scale_independent(a, b, create_shooting_star())));
    }// a, b for scale, and x, y for position
    
    function shooting_stars(){
        return color((overlay(shooting_star_position(0.06, 0.19, -0.5, -0.3),
                     rotate(-0.06,(overlay(shooting_star_position(0.06, 0.2, 0.1, -0.3), 
                     overlay(shooting_star_position(0.08, 0.19,-0.1, -0.6),
                     shooting_star_position(0.1, 0.15, 0.6, -0.5))))))),0.7, 0.7, 0.7);
    }
    
    
    // different stars have their different possibilities to be generated.
    //type: range from 1 to 1000
    function stars_type(type){
        if(type % 9 === 0){
            return scale_independent(0.04, 0.04, yellow(circle));
        }
        else if(type % 19 === 0){
            return scale_independent(0.08, 0.08, white(circle));
        }
        else if(type % 29 === 0){
            return scale_independent(0.06, 0.06, pink(circle));
        }
        else if(type % 59 === 0){
            return scale_independent(0.08, 0.08, blue(circle));
        }
        else if(type % 79 === 0){
            return scale_independent(0.3, 0.3, yellow(pentagram));
        }
        else if(type % 729 === 0){
            return scale_independent(0.3, 0.3, pink(pentagram));
        }
        else if(type % 999 === 0){
            return scale_independent(0.5, 0.5, green(pentagram));
        }
        else if(type % 1001 === 0){
            return scale_independent(0.1, 0.1, purple(circle));
        }
        else if(type === 1999){
            return scale_independent(0.5, 0.5, white(pentagram));
        }
        else if(type === 1){
            return rotate(random(), scale_independent(1, 1, Saturn()));
        }
        else if(type === 2){
            return rotate(random(), scale_independent(1, 1, Uranus()));
        }
        else{
            return blank;
        }
    }

    
    //some places may be taken by stars and others will be taken by blank
    function stars(n){
        return n <= 13
               ? blank
               : stack_frac(1/(n-1), stars_row(n - 1 , 50), stars(n - 1));
    }
    
    //creating the places by rows and coloums and then fill them
    function stars_row(row_number, row_limit){
            if(row_limit === 1){
                return blank;
            }
            else{
                const rand = random();
                return beside_frac(1 / (row_limit - 1), 
                                   translate(rand / 2000, rand / 2000,stars_type(rand)), 
                                   stars_row(row_number, row_limit-1));
    }}
    
    
    //create a background with fading colors
    function background(n){
       return stack_frac(0.94, fade(n), 
                        overlay_frac(0, 
                                     blank, 
                                     scale_independent(1.3, 6.5, color(circle, 0.09, 0.1, 0.24))));
    }
    //create the changing colors of the sky
    function fade(n){
        return n === 1
        ? blank
        : stack_frac(1 / (n-1), 
            overlay_frac(1/n, blank, 
                         overlay_frac(0, blank, color(square, 0.034, 0.05, 0.3))), 
                         fade(n-1));
    }
    
    const st = stars(50);
    const bg = background(50);
    
        return overlay_frac(0.1, scale_independent(0.95,0.95,moon()),
               overlay_frac(0, shooting_stars(), overlay_frac(0.03, st, bg)));
}

//testing
show(runes_contest_YU_HANG());
