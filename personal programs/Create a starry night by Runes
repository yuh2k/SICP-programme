// This program can create a totally unique picture of a starry night every time,
// because it creates stars randomly.



//------------------helper functions-------------------------------

// return a random number betweeen 1 and 500, 
// to create different stars or blanks in the following functions.
function random(){ 
    const random_helper = (500 * math_random(2));
    const random = (random_helper - random_helper % 1);
    return random;
}



// create a Uranus (there might be more than 1 Uranus in the pic )
function Uranus(){
    return overlay_frac(0.2, scale_independent(0.05, 0.9, blue(circle)), 
                (scale_independent(0.4, 0.4, indigo(circle))));
}

// create a Saturn (there might be more than 1 Saturn in the pic)
function Saturn(){
    return overlay_frac(0.2, quarter_turn_right(
                 scale_independent(0.05, 1, color(circle, 0.58, 0.5, 0.3))), 
                (scale_independent(0.4, 0.4, yellow(circle))));
}

// create a moon
function moon(){
    return translate(-0.75, -0.75, 
           scale_independent(0.12, 0.12, overlay_frac(0, 
                        yellow(circle), 
                        translate(0.4, 0.2, 
                        color(circle, 0.258823, 0.18823, 0.4039)))));// RGB (0,255ï¼‰converted 
}

// create shooting stars with pentagram and sail
function create_shooting_star(){
    return beside_frac(0.1, stack_frac(0.96, beside(sail, flip_horiz(sail)), pentagram), blank);
}

function shooting_star_position(a, b, x, y){
    return translate(x, y, rotate(-0.7, scale_independent(a, b, create_shooting_star())));
}// a, b for scale, and x, y for position

function shooting_stars(){
    return color((overlay(shooting_star_position(0.06, 0.16, -0.5, -0.3),
                 (overlay(shooting_star_position(0.1, 0.12, 0.1, -0.3), 
                  overlay(shooting_star_position(0.08, 0.13,-0.1, -0.6),
                  shooting_star_position(0.1, 0.15, 0.6, -0.5)))))),0.7,0.7,0.5);
}


// different stars have their different possibilities to be generated.
function stars_type(type){
    if(type % 16 === 0){
        return scale_independent(0.06, 0.06, yellow(circle));
    }
    else if(type % 32 === 0){
        return scale_independent(0.08, 0.08, white(circle));
    }
    else if(type % 64 === 0){
        return scale_independent(0.05, 0.05, pink(circle));
    }
    else if(type % 64 === 0){
        return scale_independent(0.08, 0.08, white(circle));
    }
    else if(type % 256 === 0){
        return scale_independent(0.3, 0.3, yellow(pentagram));
    }
    else if(type === 5){
        return scale_independent(0.5, 0.5, yellow(pentagram));
    }
    else if(type === 6){
        return scale_independent(0.6, 0.6, orange(nova));
    }
    else if(type === 7){
        return scale_independent(0.1, 0.1, purple(circle));
    }
    else if(type === 8){
        return scale_independent(0.5, 0.5, white(pentagram));
    }
    else if(type === 9){
        return scale_independent(0.3, 0.3, yellow(nova));
    }
    else if(type === 10){
        return scale_independent(0.2, 0.2, white(circle));
    }
    else if(type === 11){
        return scale_independent(1, 1, Saturn());
    }
    else if(type === 12){
        return scale_independent(0.8, 0.8, Uranus());
    }
    else{
        return blank;
    }
}
//-------------------------------------------------------------
//Above are preliminary functions for creating stars.



//create stars, using random number function
//some places may be taken by stars and others will be taken by blank
function stars(n){
    return n <= 15
           ? blank
           : stack_frac(1/(n-1), stars_row(n - 1 , 50), stars(n - 1));
}

//creating the places by rows and coloums and then fill them
function stars_row(row_number, row_limit){
        if(row_limit === 1){
            return blank;
        }
        else{
            const rand = random();
            return beside_frac(1 / (row_limit - 1), 
                               stars_type(rand), 
                               stars_row(row_number, row_limit-1));
}}


//create a background with fading colors
function background(n){
   return stack_frac(0.94, fade(n), 
                    overlay_frac(0, 
                                 blank, 
                                 scale_independent(1.3, 6.5, color(circle, 0.1, 0.12, 0.3))));
}
//changing colors of the sky
function fade(n){
    return n === 1
    ? blank
    : stack_frac(1 / (n-1), 
        overlay_frac(1/n, blank, 
                     overlay_frac(0, blank, color(square, 0.13, 0.05, 0.3))), 
                     fade(n-1));
}

const st = stars(50);
const bg = background(50);


//show the pic finally
show(overlay_frac(0.1, moon(),overlay_frac(0, shooting_stars(), overlay_frac(0.03, st, bg))));















